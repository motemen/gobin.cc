#!/bin/bash

set -e

o() {
    echo "$*" >&2
}

die() {
    echo >&2 "$*"
    exit 1
}

sync-remote() {
    remote=$1
    name=$(basename "$remote")

    # TODO: check go1 branch
    if git ls-files --error-unmatch "$name" > /dev/null 2>&1; then
        if git ls-files -s "$name" | grep -v '^160000' > /dev/null 2>&1; then
            die "$path is not a submodule"
        fi

        o "updating submodule $name"
        git config -f .gitmodules "submodule.$name.url" "$remote"
        git submodule update --remote --init "$name"

        if ! git diff --quiet --cached "$name"; then
            echo " - update $name"
        fi
    else
        o "adding $remote as submodule $name"
        git submodule add "$remote" "$name"

        echo " - add $name"
    fi
}

sync-remote-subpath() {
    remote=$1
    path=$2
    name=$(basename "$path")

    o "fetching $remote"
    git fetch -q "$remote"

    if ! git rev-parse --verify FETCH_HEAD:LICENSE > /dev/null 2>&1; then
        die "$remote does not have LICENSE file"
    fi

    already_existed=
    test -e "$name" && already_existed=1

    o "checking out $path/ on remote to $name/"
    treeish=$(git rev-parse "FETCH_HEAD:$path")
    test "$(git cat-file -t "$treeish")" = "tree"
    test "$already_existed" && git rm --ignore-unmatch -q -rf "$name"
    git read-tree -u --prefix="$name/" "$treeish"
    for f in "$name"/*; do
        test -d "$f" && git rm -q -rf "$f"
    done

    o "copying LICENSE to $name/"
    git cat-file blob FETCH_HEAD:LICENSE > "$name/LICENSE"
    git add "$name/LICENSE"

    if ! git diff --quiet --cached --diff-filter=A -- "$name"; then
        echo " - add $name"
    fi
    if ! git diff --quiet --cached --diff-filter=M -- "$name"; then
        echo " - update $name"
    fi
}

main() {
    while read -r origin; do
        name=$(basename "$origin")

        o "# $name ($origin)"
        case "$origin" in
            github.com/*/*/*)
                path=${origin#github.com/*/*/}
                remote=${origin/\/$path/}
                sync-remote-subpath "https://$remote" "$path"
            ;;

            github.com/*/*)
                sync-remote "https://$origin"
            ;;

            *)
                echo "unknown origin: $origin" >&2
            ;;

        esac

        test "$(go list -f '{{.Name}}' "./$name")" = 'main' || die "$name is not a main package"
    done < SOURCES
}

main
