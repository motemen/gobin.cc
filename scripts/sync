#!/bin/bash

set -e

o() {
    echo "$*" >&2
}

die() {
    echo >&2 "$*"
    exit 1
}

sync-remote() {
    remote=$1
    name=$(basename "$remote")

    # TODO: check go1 branch
    if git ls-files --error-unmatch "$name" > /dev/null 2>&1; then
        if git ls-files -s "$name" | grep -v '^160000' > /dev/null 2>&1; then
            die "$path is not a submodule"
        fi

        o "updating submodule $name"
        git config -f .gitmodules "submodule.$name.url" "$remote"
        git submodule update --remote --init "$name"
    else
        o "adding $remote as submodule $name"
        git submodule add "$remote" "$name"
    fi
}

sync-remote-subpath() {
    remote=$1
    path=$2
    name=$(basename "$path")

    o "fetching $remote"
    git fetch --quiet "$remote"

    if ! git rev-parse --verify FETCH_HEAD:LICENSE > /dev/null 2>&1; then
        die "$remote does not have LICENSE file"
    fi

    o "checking out remote's $path at $name/"
    treeish=$(git rev-parse "FETCH_HEAD:$path")
    test "$(git cat-file -t "$treeish")" = "tree"
    test -e "$name" && git rm -q -rf -- "$name/"
    git read-tree -u --prefix="$name/" "$treeish"

    o "copying LICENSE to $name/"
    git cat-file blob FETCH_HEAD:LICENSE > "$name/LICENSE"
    git add "$name/LICENSE"
}

main() {
    find "$sources_dir" -type f |
        while read -r s; do
            origin=$(head -1 "$s")
            name=${s#$sources_dir/}
            o "# $name ($origin)"
            case "$origin" in
                github.com/*/*/*)
                    path=${origin#github.com/*/*/}
                    remote=${origin/\/$path/}
                    sync-remote-subpath "https://$remote" "$path"
                ;;

                github.com/*/*)
                    sync-remote "https://$origin"
                ;;

                *)
                    echo "unknown origin: $origin" >&2
                ;;

            esac
        done
}

root_dir=$(cd "$(dirname "$0")" && cd .. && pwd)

sources_dir="$root_dir/sources"

main
